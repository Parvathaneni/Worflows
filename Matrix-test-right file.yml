name: Metrics Collector Master (Correct for Your Structure)

on:
  workflow_dispatch:
    inputs:
      org_folder:
        description: 'Org folder under orgs/ (e.g., orgA, orgB)'
        required: true
      action_folder:
        description: 'Action folder under lob-shared/ (e.g., topics, reptype-and-technology)'
        required: true
    secrets:
      GH_PAT:
        required: true

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Validate and Batch JSON Files
        id: set-matrix
        run: |
          INPUT_FOLDER="orgs/${{ inputs.org_folder }}"

          if [ ! -d "$INPUT_FOLDER" ]; then
            echo "Folder $INPUT_FOLDER does not exist. Exiting."
            exit 1
          fi

          mkdir -p valid_jsons invalid_jsons matrix_batches failed_repos

          echo "Validating JSON files..."
          for file in $(find "$INPUT_FOLDER" -name "*.json"); do
            if jq empty "$file" > /dev/null 2>&1; then
              cp "$file" valid_jsons/
              echo "Valid JSON: $file"
            else
              cp "$file" invalid_jsons/
              echo "Invalid JSON skipped: $file"
            fi
          done

          if [ ! "$(ls -A valid_jsons)" ]; then
            echo "No valid JSON files found. Exiting."
            exit 1
          fi

          echo "Merging all valid JSONs..."
          jq -s 'add' valid_jsons/*.json > all_repos.json

          total_repos=$(jq length all_repos.json)
          echo "Total valid repos found: $total_repos"

          batch_size=500
          batch_num=0
          for ((i=0; i<total_repos; i+=batch_size)); do
            jq ".[$i:($i+$batch_size)]" all_repos.json > matrix_batches/batch_${batch_num}.json
            batch_num=$((batch_num+1))
          done

          batch_files=$(ls matrix_batches | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix={\"batch\":$batch_files}" >> $GITHUB_OUTPUT

  fetch-and-process:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJSON(needs.prepare-matrix.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Load Batch
        run: |
          cp matrix_batches/${{ matrix.batch }} repos.json

      - name: Process Repos with Local Action
        run: |
          mkdir -p failed_repos

          repos=$(jq -r '.[].repo' repos.json)

          for repo in $repos; do
            echo "Calling custom action for repo: $repo"

            set +e
            gh workflow run --repo ${{ github.repository }} \
              ./lob-shared/${{ inputs.action_folder }} \
              --ref ${{ github.sha }} \
              -f token="${{ secrets.GH_PAT }}" \
              -f repo="$repo"
            status=$?
            set -e

            if [ $status -ne 0 ]; then
              echo "{\"repo\":\"$repo\"}" >> failed_repos/failed_list.jsonl
              echo "Failed: $repo"
            else
              echo "Success: $repo"
            fi
          done

      - name: Save Failed Repos
        if: always()
        run: |
          if [ -f failed_repos/failed_list.jsonl ]; then
            jq -s '.' failed_repos/failed_list.jsonl > failed_repos/failed_repos.json
            echo "Saved failed repos."
          else
            echo "No failed repos."
          fi

  retry-failed:
    needs: fetch-and-process
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Retry Failed Repos
        run: |
          if [ -f failed_repos/failed_repos.json ]; then
            total=$(jq length failed_repos/failed_repos.json)
            for ((i=0; i<$total; i++)); do
              repo=$(jq -r ".[$i].repo" failed_repos/failed_repos.json)
              echo "Retrying repo: $repo"

              gh workflow run --repo ${{ github.repository }} \
                ./lob-shared/${{ inputs.action_folder }} \
                --ref ${{ github.sha }} \
                -f token="${{ secrets.GH_PAT }}" \
                -f repo="$repo"
            done
          else
            echo "No repos to retry."
          fi
